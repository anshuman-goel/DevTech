---
# Ref:
#
# https://tecadmin.net/install-jenkins-in-ubuntu/
# https://github.com/geerlingguy/ansible-role-jenkins/blob/master/handlers/main.yml
# https://jjasghar.github.io/blog/2016/01/03/getting-jenkins-and-jenkins-job-builder-running/
#
# ansible-playbook JenkinsConfig.yml -i inventory -vvv

- hosts: Jenkins
  become: yes
  
  vars:
    - jenkins_repo_url: deb https://pkg.jenkins.io/debian binary/
    - jenkins_repo_key_url: https://pkg.jenkins.io/debian/jenkins.io.key
    - jenkins_pkg_url: https://pkg.jenkins.io/debian/binary
    - jenkins_init_file: /etc/default/jenkins
    - jenkins_http_port_param: HTTP_PORT
    - jenkins_java_options_env_var: JAVA_ARGS
    - jenkins_version: 2.60
    - jenkins_package_state: present
    - jenkins_jar_location: /opt/jenkins-cli.jar
    - jenkins_params:
        url_username: admin
  
  tasks:
    - name: Install add-apt-repostory
      apt: name=software-properties-common state=latest

    - name: Add Oracle Java Repository
      apt_repository: repo='ppa:webupd8team/java'

    - name: Accept Java 8 License
      debconf: name='oracle-java8-installer' question='shared/accepted-oracle-license-v1-1' value='true' vtype='select'

    - name: install dependencies
      apt:
        pkg: "{{ item }}"
        state: installed
        update_cache: true
        cache_valid_time: 500000
      with_items:
        - git
        - oracle-java8-installer
        - ca-certificates
        - oracle-java8-set-default
        - curl
        - apt-transport-https
        - python-pip

    - name: Add Jenkins apt repository key.
      apt_key:
        url: "{{ jenkins_repo_key_url }}"
        state: present

    - name: Add Jenkins apt repository.
      apt_repository:
        repo: "{{ jenkins_repo_url }}"
        state: present
        update_cache: yes
      when: jenkins_repo_url != ''

    - name: Download specific Jenkins version.
      get_url:
        url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
        dest: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
      when: jenkins_version is defined

    - name: Check if we downloaded a specific version of Jenkins.
      stat:
        path: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
      register: specific_version
      when: jenkins_version is defined

    - name: Install our specific version of Jenkins.
      apt:
        deb: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
        state: installed
      when: jenkins_version is defined and specific_version.stat.exists
      # notify: configure default users

    - name: Ensure Jenkins is installed.
      apt:
        name: jenkins
        state: "{{ jenkins_package_state }}"
      # notify: configure default users

    # - name: install pip dependencies
    #   pip:
    #     name: 
    #       - jenkins-job-builder

    # - name: copy jenkins cli
    #   copy:
    #     src: ./jenkins.CLI.xml
    #     dest: /var/lib/jenkins/jenkins.CLI.xml

    # - name: copy jenkins config
    #   copy:
    #     src: ./config.xml
    #     dest: /var/lib/jenkins/config.xml

    - name: Restart jenkins when user changes.
      service: name=jenkins state=restarted
    
    - name: Install nodejs and npm
      apt:
        pkg: "{{ item }}"
        state: installed
        update_cache: true
      with_items:
       - nodejs
       - npm
    
    # - name: Add ansible repository
    #   apt_repository:
    #     repo: ppa:ansible/ansible
    #     update_cache: yes

    # - name: Install ansible
    #   apt:
    #     name: ansible   
    #     state: present 

    # - name: Add Maven repository 
    #   apt_repository:
    #     repo: 'ppa:andrei-pozolotin/maven3'
    #     state: present
    #     update_cache: yes    

    # - name: Purge existing Maven configuration files
    #   apt:
    #     name: "{{ item }}"
    #     purge: yes
    #     update_cache: yes
    #   with_items:
    #     - maven
    #     - maven2
    #     - maven3
   
    # - name: Install maven3
    #   apt:
    #     name: maven3
    #     state: latest
    #     update_cache: yes
    
    - include_vars:
        file: dns.yml

    - name: Get the jenkins-cli jarfile from the Jenkins server.
      get_url:
        url: "http://{{ JenkinsDns }}:8080/jnlpJars/jenkins-cli.jar"
        dest: "{{ jenkins_jar_location }}"
      register: jarfile_get
      until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
      retries: 5
      delay: 10
      check_mode: no

    - name: Copy checkbox build file to jenkins server
      copy:
        src: ./CheckBoxBuild.yml
        dest: /home/ubuntu/CheckBoxBuild.yml
    
    - action: command cat /var/lib/jenkins/secrets/initialAdminPassword
      register: out
      changed_when: "'z' in out.stdout"

    - set_fact:
        admin_password: "{{ out.stdout_lines[0] }}"

    - name: copy jenkins config
      copy:
        src: ./config.xml
        dest: /var/lib/jenkins/config.xml

    - name: "Install Jenkins git plugin"
      jenkins_plugin: 
        name: "{{ item }}"
        params: "{{ jenkins_params }}"
        url_password: "{{ admin_password }}"
        url: http://{{ JenkinsDns }}:8080
        validate_certs: no
      with_items:
        - git
        - postbuild-task
        - build-token-root

    - name: Restart jenkins when user changes.
      service: name=jenkins state=restarted

    - name: "Wait For Jenkins To Come Up"
      uri:
        url: "http://{{ JenkinsDns }}:8080/cli/"
        status_code: 403
      register: result
      until: result.status == 403
      retries: 10
      delay: 5

    # - name: jenkins job builder configuration
    #   action: template src="./jenkins_jobs.ini" dest="/home/ubuntu/jenkins_jobs.ini" owner=root group=root mode=0600
    
    # - name: Run jenkins build for checkbox
    #   command: jenkins-jobs --conf /home/ubuntu/jenkins_jobs.ini update /home/ubuntu/CheckBoxBuild.yml

    - name: Copying Checkbox.io Job XML 
      copy: 
        src: configcheckbox.xml
        dest: /home/ubuntu/configcheckbox.xml
      # when: "job_checkbox.stdout.find('checkbox.io') == -1"

    - name: Create the job
      shell: "java -jar /opt/jenkins-cli.jar -s http://{{ JenkinsDns }}:8080/ list-jobs --username admin --password {{ admin_password }}"
      register: jobs

    - name: Create the job
      shell: "java -jar /opt/jenkins-cli.jar -s http://{{ JenkinsDns }}:8080/ create-job checkbox < /home/ubuntu/configcheckbox.xml --username admin --password {{ admin_password }}"
      when: "jobs.stdout.find('checkbox') == -1"

    - name: Build the job
      shell: curl -v http://ec2-54-91-101-202.compute-1.amazonaws.com:8080/buildByToken/build?job=checkbox\&token=8fc61f12b36588bf13393a30a6af61e6

    # Proper time or way to setup to make sure it sleeps and awakes after only build is finished.
    # Need to find or think for build successful results as same problem with console command
    # - name: Job Console output
    #   shell: "java -jar /opt/jenkins-cli.jar -s http://{{ JenkinsDns }}:8080/ console checkbox --username admin --password {{ admin_password }}"

  handlers: 
      - name: configure default users
        template:
          src: basic-security.groovy
          dest: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
          owner: "{{ jenkins_process_user }}"
          group: "{{ jenkins_process_group }}"
          mode: 0775

...
